<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 The Java2TypeScript Authors.  All rights reserved.
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>j2ts-transpiler</artifactId>
    <name>j2ts-transpiler</name>

    <parent>
        <groupId>com.datathings</groupId>
        <artifactId>j2ts-parent</artifactId>
        <version>98-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <properties>
        <header.path>${basedir}/../HEADER</header.path>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-compiler</artifactId>
            <version>1.1.3</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <version>2.0</version>
                <executions>
                    <execution>
                        <id>main.ts.compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                //windows compat...
                                def gbasedir = basedir.getAbsolutePath().replace('\\', '/')
                                def prefix = (System.getProperty("os.name").toLowerCase().contains("win")) ? "CMD /C " : ""
                                //let's start
                                def ant = new AntBuilder()
                                //prepare dir
                                ant.copy(file: "${gbasedir}/src/main/resources/jre/jre.ts", todir: "${gbasedir}/target/classes-npm-jre")
                                ant.copy(file: "${gbasedir}/src/main/resources/jre/package.json", todir: "${gbasedir}/target/classes-npm-jre")
                                ant.copy(file: "${gbasedir}/src/main/resources/jre/readme.md", todir: "${gbasedir}/target/classes-npm-jre")
                                ant.copy(file: "${gbasedir}/src/main/resources/jre/tsconfig.json", todir: "${gbasedir}/target/classes-npm-jre")
                                //prepare version
                                def project_version = "${project.version}".replaceAll("-SNAPSHOT", "")
                                while (project_version.split('\\.').length != 3) {
                                    project_version += '.0'
                                }
                                ant.replace(file: "${gbasedir}/target/classes-npm-jre/package.json", token: "J2TS_VERSION", value: project_version)
                                //run npm install
                                def npmInstallProcess = (prefix + "npm install").execute(null, new File("${gbasedir}/target/classes-npm-jre"))
                                npmInstallProcess.waitForProcessOutput(System.out, System.err)
                                if (npmInstallProcess.exitValue() != 0) {
                                    exit
                                }
                                //run tsc and delete temp .ts file
                                def tscProcess = (prefix + "node ${gbasedir}/target/classes-npm-jre/node_modules/typescript/lib/tsc.js").execute(null, new File("${gbasedir}/target/classes-npm-jre"))
                                tscProcess.waitForProcessOutput(System.out, System.err)
                                if (tscProcess.exitValue() != 0) {
                                    exit
                                }
                                def npmPackProcess = (prefix + "npm pack classes-npm-jre/").execute(null, new File("${gbasedir}/target/"))
                                npmPackProcess.waitForProcessOutput(System.out, System.err)
                                if (npmPackProcess.exitValue() != 0) {
                                    exit
                                }
                                ant.delete(file: "${gbasedir}/target/classes-npm-jre/tsconfig.json")

                                //prepare junit.ts dir
                                //prepare dir
                                ant.copy(file: "${gbasedir}/src/main/resources/junit/junit.ts", todir: "${gbasedir}/target/classes-npm-junit")
                                ant.copy(file: "${gbasedir}/src/main/resources/junit/package.json", todir: "${gbasedir}/target/classes-npm-junit")
                                ant.copy(file: "${gbasedir}/src/main/resources/junit/readme.md", todir: "${gbasedir}/target/classes-npm-junit")
                                ant.copy(file: "${gbasedir}/src/main/resources/junit/tsconfig.json", todir: "${gbasedir}/target/classes-npm-junit")
                                ant.replace(file: "${gbasedir}/target/classes-npm-junit/package.json", token: "J2TS_VERSION", value: project_version)
                                //run npm install
                                def npmInstallProcessUnit = (prefix + "npm install").execute(null, new File("${gbasedir}/target/classes-npm-junit"))
                                npmInstallProcessUnit.waitForProcessOutput(System.out, System.err)
                                if (npmInstallProcessUnit.exitValue() != 0) {
                                    exit
                                }
                                //run tsc and delete temp .ts file
                                def tscProcessUnit = (prefix + "node ${gbasedir}/target/classes-npm-junit/node_modules/typescript/lib/tsc.js").execute(null, new File("${gbasedir}/target/classes-npm-junit"))
                                tscProcessUnit.waitForProcessOutput(System.out, System.err)
                                if (tscProcessUnit.exitValue() != 0) {
                                    exit
                                }

                                def npmPackProcessUnit = (prefix + "npm pack classes-npm-junit/").execute(null, new File("${gbasedir}/target/"))
                                npmPackProcessUnit.waitForProcessOutput(System.out, System.err)
                                if (npmPackProcessUnit.exitValue() != 0) {
                                    exit
                                }
                                ant.delete(file: "${gbasedir}/target/classes-npm-junit/tsconfig.json")
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <version>2.0</version>
                <executions>
                    <execution>
                        <id>main.ts.deploy</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                //windows compat...
                                def gbasedir = basedir.getAbsolutePath().replace('\\', '/')
                                def prefix = (System.getProperty("os.name").toLowerCase().contains("win")) ? "CMD /C " : ""
                                def npmInstallProcessJRE = (prefix + "npm publish").execute(null, new File("${gbasedir}/target/classes-npm-jre"))
                                npmInstallProcessJRE.waitForProcessOutput(System.out, System.err)
                                if (npmInstallProcessJRE.exitValue() != 0) {
                                    exit
                                }
                                def npmInstallProcessUnit = (prefix + "npm publish").execute(null, new File("${gbasedir}/target/classes-npm-junit"))
                                npmInstallProcessUnit.waitForProcessOutput(System.out, System.err)
                                if (npmInstallProcessUnit.exitValue() != 0) {
                                    exit
                                }
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>